// <auto-generated />
using System;
using BreweryAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BreweryAPI.Migrations
{
    [DbContext(typeof(DBaseContext))]
    partial class DBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BreweryAPI.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BreweryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IBUPercentage")
                        .HasColumnType("int")
                        .HasColumnName("IBU");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("StrongValue")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Alc.");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.ToTable("Beers");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Brewery"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Wholesaler"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Client"
                        });
                });

            modelBuilder.Entity("BreweryAPI.Entities.ShopBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeerInBasketId")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerInBasketId");

                    b.HasIndex("ClientId");

                    b.ToTable("ShopBaskets");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("CompanyAccountId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BreweryAPI.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserAccounts");

                    b.HasDiscriminator().HasValue("UserAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BreweryAPI.Entities.Client", b =>
                {
                    b.HasBaseType("BreweryAPI.Entities.UserAccount");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("BreweryAPI.Entities.CompanyAccount", b =>
                {
                    b.HasBaseType("BreweryAPI.Entities.UserAccount");

                    b.HasDiscriminator().HasValue("CompanyAccount");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Brewery", b =>
                {
                    b.HasBaseType("BreweryAPI.Entities.CompanyAccount");

                    b.HasDiscriminator().HasValue("Brewery");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Address", b =>
                {
                    b.HasOne("BreweryAPI.Entities.UserAccount", "UserAccount")
                        .WithOne("Address")
                        .HasForeignKey("BreweryAPI.Entities.Address", "UserAccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Beer", b =>
                {
                    b.HasOne("BreweryAPI.Entities.Brewery", "Brewery")
                        .WithMany()
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brewery");
                });

            modelBuilder.Entity("BreweryAPI.Entities.ShopBasket", b =>
                {
                    b.HasOne("BreweryAPI.Entities.Beer", "BeerInBasket")
                        .WithMany("ShopBaskets")
                        .HasForeignKey("BeerInBasketId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BreweryAPI.Entities.Client", "Client")
                        .WithMany("ShopBaskets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeerInBasket");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Stock", b =>
                {
                    b.HasOne("BreweryAPI.Entities.Beer", "BeerInStock")
                        .WithMany("Stocks")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BreweryAPI.Entities.CompanyAccount", "CompanyAccount")
                        .WithMany("Stocks")
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BeerInStock");

                    b.Navigation("CompanyAccount");
                });

            modelBuilder.Entity("BreweryAPI.Entities.UserAccount", b =>
                {
                    b.HasOne("BreweryAPI.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Beer", b =>
                {
                    b.Navigation("ShopBaskets");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BreweryAPI.Entities.UserAccount", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("BreweryAPI.Entities.Client", b =>
                {
                    b.Navigation("ShopBaskets");
                });

            modelBuilder.Entity("BreweryAPI.Entities.CompanyAccount", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
